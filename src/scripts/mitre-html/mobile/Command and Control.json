[
  {
    "id": "T1437",
    "name": "Application Layer Protocol",
    "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the mobile device, and often the results of those commands, will be embedded within the protocol traffic between the mobile device and server.",
    "outcome": "No Test Coverage",
    "topCount": 0,
    "bottomCount": 0,
    "subtechniques": [
      {
        "id": ".001",
        "name": "Web Protocols",
        "description": "Adversaries may communicate using application layer protocols associated with web protocols traffic to avoid detection/network filtering by blending in with existing traffic. Commands to remote mobile devices, and often the results of those commands, will be embedded within the protocol traffic between the mobile client and server.",
        "outcome": "No Test Coverage",
        "topCount": 0,
        "bottomCount": 0
      }
    ]
  },
  {
    "id": "T1616",
    "name": "Call Control",
    "description": "Adversaries may make, forward, or block phone calls without user authorization. This could be used for adversary goals such as audio surveillance, blocking or forwarding calls from the device owner, or C2 communication.",
    "outcome": "No Test Coverage",
    "topCount": 0,
    "bottomCount": 0,
    "subtechniques": []
  },
  {
    "id": "T1637",
    "name": "Dynamic Resolution",
    "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. This algorithm can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.",
    "outcome": "No Test Coverage",
    "topCount": 0,
    "bottomCount": 0,
    "subtechniques": [
      {
        "id": ".001",
        "name": "Domain Generation Algorithms",
        "description": "Adversaries may useDomain Generation Algorithms(DGAs) to procedurally generate domain names for uses such as command and control communication   or malicious application distribution.",
        "outcome": "No Test Coverage",
        "topCount": 0,
        "bottomCount": 0
      }
    ]
  },
  {
    "id": "T1521",
    "name": "Encrypted Channel",
    "description": "Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.",
    "outcome": "No Test Coverage",
    "topCount": 0,
    "bottomCount": 0,
    "subtechniques": [
      {
        "id": ".001",
        "name": "Symmetric Cryptography",
        "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, Blowfish, and RC4.",
        "outcome": "No Test Coverage",
        "topCount": 0,
        "bottomCount": 0
      },
      {
        "id": ".002",
        "name": "Asymmetric Cryptography",
        "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private that should not be distributed. Due to how asymmetric algorithms work, the sender encrypts data with the receiverâ€™s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA, ElGamal, and ECDSA.",
        "outcome": "No Test Coverage",
        "topCount": 0,
        "bottomCount": 0
      },
      {
        "id": ".003",
        "name": "SSL Pinning",
        "description": "Adversaries may useSSL Pinningto protect the C2 traffic from being intercepted and analyzed.",
        "outcome": "No Test Coverage",
        "topCount": 0,
        "bottomCount": 0
      }
    ]
  },
  {
    "id": "T1544",
    "name": "Ingress Tool Transfer",
    "description": "Adversaries may transfer tools or other files from an external system onto a compromised device to facilitate follow-on actions. Files may be copied from an external adversary-controlled system through the command and control channel  or through alternate protocols with another tool such as FTP.",
    "outcome": "No Test Coverage",
    "topCount": 0,
    "bottomCount": 0,
    "subtechniques": []
  },
  {
    "id": "T1509",
    "name": "Non-Standard Port",
    "description": "Adversaries may generate network traffic using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
    "outcome": "No Test Coverage",
    "topCount": 0,
    "bottomCount": 0,
    "subtechniques": []
  },
  {
    "id": "T1644",
    "name": "Out of Band Data",
    "description": "Adversaries may communicate with compromised devices using out of band data streams. This could be done for a variety of reasons, including evading network traffic monitoring, as a backup method of command and control, or for data exfiltration if the device is not connected to any Internet-providing networks (i.e. cellular or Wi-Fi). Several out of band data streams exist, such as SMS messages, NFC, and Bluetooth.",
    "outcome": "No Test Coverage",
    "topCount": 0,
    "bottomCount": 0,
    "subtechniques": []
  },
  {
    "id": "T1663",
    "name": "Remote Access Software",
    "description": "Adversaries may use legitimate remote access software, such asVNC,TeamViewer,AirDroid,AirMirror, etc., to establish an interactive command and control channel to target mobile devices.",
    "outcome": "No Test Coverage",
    "topCount": 0,
    "bottomCount": 0,
    "subtechniques": []
  },
  {
    "id": "T1481",
    "name": "Web Service",
    "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "outcome": "No Test Coverage",
    "topCount": 0,
    "bottomCount": 0,
    "subtechniques": [
      {
        "id": ".001",
        "name": "Dead Drop Resolver",
        "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.",
        "outcome": "No Test Coverage",
        "topCount": 0,
        "bottomCount": 0
      },
      {
        "id": ".002",
        "name": "Bidirectional Communication",
        "description": "Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to and receiving output from a compromised system. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.",
        "outcome": "No Test Coverage",
        "topCount": 0,
        "bottomCount": 0
      },
      {
        "id": ".003",
        "name": "One-Way Communication",
        "description": "Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to a compromised system without receiving return output. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.",
        "outcome": "No Test Coverage",
        "topCount": 0,
        "bottomCount": 0
      }
    ]
  }
]